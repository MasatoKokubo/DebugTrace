// (c) 2015 Masato Kokubo
buildscript {
	repositories {
		jcenter()
	}
    dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
	}
}
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'

repositories {
	jcenter()
}

dependencies {
	compile 'log4j:log4j:1.+'
	compile 'org.apache.logging.log4j:log4j-api:2.+'
	runtime 'org.apache.logging.log4j:log4j-core:2.+'
	compile 'org.slf4j:slf4j-api:1.+'
	runtime 'ch.qos.logback:logback-classic:1.+'

	testCompile 'junit:junit:4.+'
	testCompile 'org.apache.commons:commons-dbcp2:2.+'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group               = 'org.debugtrace'
archivesBaseName    = 'debugtrace'
version             = '2.3.0'

compileJava {
	options.encoding     = 'UTF-8'
	options.deprecation  = true
	options.debug        = true
	options.compilerArgs = ['-Xlint']
}

compileTestJava {
	options.encoding     = compileJava.options.encoding
	options.deprecation  = compileJava.options.deprecation
	options.debug        = compileJava.options.debug
	options.compilerArgs = compileJava.options.compilerArgs
}

task compileJava_ja(type:JavaCompile) {
	options.encoding     = compileJava.options.encoding
	options.deprecation  = compileJava.options.deprecation
	options.debug        = compileJava.options.debug
	options.compilerArgs = compileJava.options.compilerArgs

	classpath      = compileJava.classpath
	source         = files('src/main_ja/java')
	destinationDir = file('build/classes/main_ja')
}

jar {
	manifest {
		attributes	'Implementation-Title'    : project.name,
					'Implementation-Version'  : version,
					'Implementation-Vendor'   : 'Masato Kokubo',
					'Implementation-Vendor-Id': 'jp.masatokokubo'
	}
}

javadoc {
	title               = "$project.name $version API Specification"
	options.encoding    = 'UTF-8'
	options.locale      = 'en'
	options.windowTitle = "$project.name"
	options.addBooleanOption('author', true)
	options.addStringOption ('bottom', '<div class="copyright">&copy;2015 Masato Kokubo</div>')
}

javadoc.doFirst {
	def cssFile = file("build/docs/javadoc/stylesheet.css")
	if (cssFile.exists())
		cssFile.delete()
}

javadoc.doLast {
	def cssFile = file("build/docs/javadoc/stylesheet.css")
	file("src/main/java/addtional.css").eachLine {
		cssFile.append("$it\n")
	}
}

task javadoc_ja(type:Javadoc) {
	dependsOn = ['compileJava_ja']

	title               = "$project.name $version API 仕様"
	options.encoding    = javadoc.options.encoding
	options.locale      = 'ja'
	options.windowTitle = javadoc.options.windowTitle
	options.overview    = javadoc.options.overview
	options.addBooleanOption('author', true)
	options.addStringOption ('bottom', '<div class="copyright">&copy;2015 小久保 雅人</div>')

	classpath      = javadoc.classpath
	source         = fileTree('src/main_ja/java').include('**/*.java')
	destinationDir = file('build/docs/javadoc_ja')
}

javadoc_ja.doFirst {
	def cssFile = file("build/docs/javadoc_ja/stylesheet.css")
	if (cssFile.exists())
		cssFile.delete()
}

javadoc_ja.doLast {
	def cssFile = file("build/docs/javadoc_ja/stylesheet.css")
	file("src/main/java/addtional_ja.css").eachLine {
		cssFile.append("$it\n")
	}
}

task zip(type: Zip, dependsOn:[jar, javadoc, javadoc_ja]) {
	appendix   = 'java'
	classifier = 'bin'

	into('/'         , {from 'build/libs'})
	into('/'         , {from 'LICENSE.txt', 'README.md', 'README_ja.md'})
	into('javadoc'   , {from 'build/docs/javadoc'})
	into('javadoc_ja', {from 'build/docs/javadoc_ja'})
	into('resources-sample', {from 'src/test/resources'})
}

task sourcesJar(type: Jar) {
	classifier = 'source'

	manifest {
		attributes	'Implementation-Title'    : project.name,
					'Implementation-Version'  : version,
					'Implementation-Vendor'   : 'Masato Kokubo',
					'Implementation-Vendor-Id': 'jp.masatokokubo'
	}

	into('/org', {from 'src/main/java/org'})
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		mavenPublication(MavenPublication) {
//			from components.java
			groupId    group
			artifactId archivesBaseName
			version    version
		}
	}
}

bintray {
	user = project.hasProperty('bintray_user') ? bintray_user : ''
	key  = project.hasProperty('bintray_api_key') ? bintray_api_key : ''
	configurations = ['archives']
	publications   = ['mavenPublication']

//	dryRun = true

	pkg {
		repo            = 'maven'
		name            = 'DebugTrace-java'
		websiteUrl      = 'https://github.com/MasatoKokubo/DebugTrace-java'
		issueTrackerUrl = 'https://github.com/MasatoKokubo/DebugTrace-java/issues'
		vcsUrl          = 'https://github.com/MasatoKokubo/DebugTrace-java.git'
		licenses        = ['MIT']
		version {
			name           = project.version
			released       = new Date()
			vcsTag         = project.version
			gpg {
				sign       = true
				passphrase = project.hasProperty('bintray_gpg_password') ? bintray_gpg_password : ''
			}
		}
	}
}
