= DebugTrace-java

link:README_ja.asciidoc[[Japanese]]

`DebugTrace-java` is a library that outputs trace logs when debugging Java programs. It is available in Java 8 or later.  +
By embedding `DebugTrace.enter()` and `DebugTrace.leave()` at the start and end of methods, you can output the execution status of the Java program under development to the log.

=== 1. Features

* Automatically outputs caller's class name, method name, source file and line number.
* Automatically indents the log with nesting methods and objects.
* Automatically output logs when changing threads.
* Uses reflection to output the contents of classes that do not implement the `toString` method.
* You can customize the output content in `DebugTrace.properties`.
* There is no dependency library at run time. (Required if you use the following logging library)
* You can use the following logging library.
     ** JDK Logger
     ** Log4j
     ** Log4j2
     ** SLF4J
     ** Console (stdout and stderr)

=== 2. How to use

Do the following for debug target and related methods.

. Insert `DebugTrace.enter()` at the beginning of methods.
. Insert `DebugTrace.leave()` at the end of methods or just before the `return` statement.
. Insert `Debug.print(\...)` to output arguments, local variables and return value to the log if necessary.

The following is an example of Java source used DebugTrace methods and the log of when it has been executed.

[source,java]
.Example1.java
----
package example;

import java.lang.reflect.Array;
import org.debugtrace.DebugTrace;

/**
 * Example1
 */
public class Example1 {
    // main
    public static void main(String[] args) {
        DebugTrace.enter(); // for DEBUGGING

        @SuppressWarnings("unused")
        Point[] points = newArray(Point.class, 2);

        DebugTrace.leave(); // for DEBUGGING
    }

    // newArray
    public static <E> E[] newArray(Class<E> elementType, int length) {
        DebugTrace.enter(); // for DEBUGGING
        DebugTrace.print("elementType", elementType); // for DEBUGGING
        DebugTrace.print("length", length); // for DEBUGGING
        @SuppressWarnings("unchecked")
        E[] array = (E[])Array.newInstance(elementType, length);
        DebugTrace.print("1 array", array); // for DEBUGGING
        try {
            for (int index = 0; index < length; ++index)
                array[index] = elementType.getConstructor().newInstance();
        }
        catch (RuntimeException e) {throw e;}
        catch (Exception e) {throw new RuntimeException(e);}
        DebugTrace.print("2 array", array); // for DEBUGGING
        DebugTrace.leave(); // for DEBUGGING
        return array;
    }

    // Point class
    public static class Point {
        private int x;
        private int y;
        public Point() {
        }
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
        public int getX() {return x;}
        public int getY() {return y;}
    }
}
----

.debugtrace.log
----
2018-07-29 22:57:25.251+09:00 DebugTrace 2.5.0 / logger: org.debugtrace.logger.Std$Err
2018-07-29 22:57:25.251+09:00 
2018-07-29 22:57:25.251+09:00 ______________________________ main ______________________________
2018-07-29 22:57:25.251+09:00 
2018-07-29 22:57:25.251+09:00 Enter example.Example1.main (Example1.java:15)
2018-07-29 22:57:25.265+09:00 | Enter example.Example1.newArray (Example1.java:25)
2018-07-29 22:57:25.265+09:00 | | elementType = (Class)class example.Example1$Point (Example1.java:26)
2018-07-29 22:57:25.265+09:00 | | length = 2 (Example1.java:27)
2018-07-29 22:57:25.265+09:00 | | 1 array = (example.Example1.Point[2])[
2018-07-29 22:57:25.265+09:00 | |   null,
2018-07-29 22:57:25.265+09:00 | |   null,
2018-07-29 22:57:25.265+09:00 | | ] (Example1.java:30)
2018-07-29 22:57:25.265+09:00 | | 2 array = (example.Example1.Point[2])[
2018-07-29 22:57:25.265+09:00 | |   (example.Example1.Point)[
2018-07-29 22:57:25.265+09:00 | |     x: 0,
2018-07-29 22:57:25.265+09:00 | |     y: 0,
2018-07-29 22:57:25.265+09:00 | |   ],
2018-07-29 22:57:25.265+09:00 | |   (example.Example1.Point)[
2018-07-29 22:57:25.265+09:00 | |     x: 0,
2018-07-29 22:57:25.265+09:00 | |     y: 0,
2018-07-29 22:57:25.265+09:00 | |   ],
2018-07-29 22:57:25.265+09:00 | | ] (Example1.java:37)
2018-07-29 22:57:25.265+09:00 | Leave example.Example1.newArray (Example1.java:38)
2018-07-29 22:57:25.265+09:00 Leave example.Example1.main (Example1.java:20)
----

=== 3. Method List

This library has the following methods. These are all static methods of org.debugtrace.DebugTrace class with no return value.

[options="header"]
.Method List
|===
|Method Name|Arguments|Outline of Processing

|`enter`
|_None_
|Outputs method start to log.

|`leave`
|_None_
|Outputs method end to log.

|`print`
|`message`: a message
|Outputs the message to log.

|`print`
|`messageSupplier`: a supplier of message
|Gets a message from the supplier and output it to log.

|`print`
|`name`: a name of value +
`value`: a value
|Outputs to the log in the form of +
`<value name> = <value>`. +
The type of value is `boolean`, `char`, `byte`, `short`, `int`, `long`, `float`, `double` or `Object`.

|`print`
|`name`: a name of the value +
`valueSupplier`: a supplier of the value
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>` +
The valueSupplier type is `BooleanSupplier`, `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|`print` +
[.small]#_[since v2.4.0]_#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: a name of value +
`value`: a value|Outputs to the log in the form of +
`<value name> = <value>(<constant name>)`. +
The type of value is `byte`, `short`, `int`, `long` or `Object`.

|`print` +
[.small]#_[since v2.4.0]_#
|`mapName`: the name of map to get constant name corresponding to number +
`name`: a name of the value +
`valueSupplier`: a supplier of the value
|Gets a value from the supplier and outputs to the log in the form of +
`<value name> = <value>(<constant name>)` +
The valueSupplier type is `IntSupplier`, `LongSupplier` or `Supplier<T>`.

|===

=== 4. Properties of *DebugTrace.properties* file

DebugTrace read `DebugTrace.properties` file in the classpath on startup.  
You can specify following properties in the `DebugTrace.properties` file.  

[options="header", cols="2,8"]
.Property List
|===
|Property Name|Description

|`logger`
| Logger DebugTrace uses +
[.small]#*Examples:*# +
&#160;&#160; `logger = Std$Out` [.small .blue]#- output to stdout *_(Default for v2.4.6 or earlier)_*# +
&#160;&#160; `logger = Std$Err` [.small .blue]#- output to stderr *_(Default for v2.5.0 or later)_*# +
&#160;&#160; `logger = Jdk` [.small .blue]#- use JDK Logger# +
&#160;&#160; `logger = Log4j` [.small .blue]#- use Log4j 1# +
&#160;&#160; `logger = Log4j2` [.small .blue]#- use Log4j 2# +
&#160;&#160; `logger = SLF4J` [.small .blue]#- use SLF4J# +

|`logLevel`
|Log level at log output +
[.small]#*Examples when use JDK:*# +
&#160;&#160; `logLevel = default` [.small .blue]#- same as finest *_(Default)_*# +
&#160;&#160; `logLevel = finest` +
&#160;&#160; `logLevel = finer` +
&#160;&#160; `logLevel = fine` +
&#160;&#160; `logLevel = config` +
&#160;&#160; `logLevel = info` +
&#160;&#160; `logLevel = warning` +
&#160;&#160; `logLevel = severe` +
[.small]#*Examples when use Log4j or Lo4j2:*# +
&#160;&#160; `logLevel = default` [.small .blue]#- same as trace *_(Default)_*# +
&#160;&#160; `logLevel = trace` +
&#160;&#160; `logLevel = debug` +
&#160;&#160; `logLevel = info` +
&#160;&#160; `logLevel = warn` +
&#160;&#160; `logLevel = error` +
&#160;&#160; `logLevel = fatal` +
[.small]#*Examples when use SLF4J:*# +
&#160;&#160; `logLevel = default` [.small .blue]#- same as trace *_(Default)_*# +
&#160;&#160; `logLevel = trace` +
&#160;&#160; `logLevel = debug` +
&#160;&#160; `logLevel = info` +
&#160;&#160; `logLevel = warn` +
&#160;&#160; `logLevel = error` +

|`enterString`
|The string used after `enter` method +
[.small]#*Example:*# +
&#160;&#160; `enterString = Enter %1$s.%2$s (%3$s:%4$d)` [.small .blue]#*_(Default)_*# +
[.small]#*Parameters:*# +
&#160;&#160; `%1`: The class name of the caller +
&#160;&#160; `%2`: The method name of the caller +
&#160;&#160; `%3`: The file name of the caller +
&#160;&#160; `%4`: The line number of the caller

|`leaveString`
|The string used before `leave` method +
[.small]#*Example:*# +
&#160;&#160; `leaveString = Leave %1$s.%2$s (%3$s:%4$d)` [.small .blue]#*_(Default)_*# +
[.small]#*Parameters:*# +
&#160;&#160; `%1`: The class name of the caller +
&#160;&#160; `%2`: The method name of the caller +
&#160;&#160; `%3`: The file name of the caller +
&#160;&#160; `%4`: The line number of the caller

|`threadBoundaryString`
|The string output in the threads boundary. +
[.small]#*Example:*# +
&#160;&#160; [.small]`threadBoundaryString = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ %1$s \__\__\__\__\__\__\__\__\__\__\__\__\__\____` +
&#160;&#160; [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: The thread name

|`classBoundaryString`
|The string output in the classes boundary. +
[.small]#*Example:*# +
&#160;&#160; `classBoundaryString = \\____ %1$s \____` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: The class name

|`indentString`
|String of one code indent +
[.small]#*Example:*# +
&#160;&#160; `indentString = \s\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`dataIndentString`
|String of one data indent +
[.small]#*Example:*# +
&#160;&#160; `dataIndentString = \\s\\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`limitString`
|The string to represent that it has exceeded the limit +
[.small]#*Example:*# +
&#160;&#160; `limitString = \...` [.small .blue]#*_(Default)_*# +

|`nonPrintString` +
[.small]#_[since v1.5.0]_#
|String of value in the case of properties that do not print the value +
[.small]#*Example:*# +
&#160;&#160; `nonPrintString = \***` [.small .blue]#*_(Default)_*# +

|`cyclicReferenceString`
|The string to represent that the cyclic reference occurs +
[.small]#*Example:*# +
`cyclicReferenceString = \\s\*\** cyclic reference \***\\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`varNameValueSeparator`
|Separator between the variable name and value +
[.small]#*Example:*# +
&#160;&#160; `varNameValueSeparator = \\s=\\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`keyValueSeparator`
|Separator between the key and value for Map object +
[.small]#*Example:*# +
&#160;&#160; `keyValueSeparator = :\\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`fieldNameValueSeparator`
|Separator between the field name and value +
[.small]#*Example:*# +
&#160;&#160; `fieldNameValueSeparator = :\\s` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +

|`printSuffixFormat`
|Output format of `print` method suffix +
[.small]#*Example:*# +
&#160;&#160; `printSuffixFormat = \\s(%3$s:%4$d)` [.small .blue]#*_(Default)_*# +
&#160;&#160; [.small .blue]#`\\s` is change to a space character# +
[.small]#*Parameters:*# +
&#160;&#160; `%1`: The class name of the caller +
&#160;&#160; `%2`: The method name of the caller +
&#160;&#160; `%3`: The file name of the caller +
&#160;&#160; `%4`: The line number of the caller

|`utilDateFormat`
|Output format of `java.util.Date` +
[.small]#*Example:*#  [.small yellow-background]#_[v2.4.6 or earlier]_# +
&#160;&#160; `utilDateFormat = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: a `java.util.Date` +
 +
[.small]#*Example:*# [.small lime-background]#_[v2.5.0 or later]_# +
&#160;&#160; `utilDateFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*_(Default)_*# +

|`sqlDateFormat`
|Output format of `java.sql.Date` +
[.small]#*Example:*#  [.small yellow-background]#_[v2.4.6 or earlier]_# +
&#160;&#160; `sqlDateFormat = %1$tY-%1$tm-%1$td` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: a `java.sql.Date` +
 +
[.small]#*Example:*# [.small lime-background]#_[v2.5.0 or later]_# +
&#160;&#160; `sqlDateFormat = yyyy-MM-ddxxx` [.small .blue]#*_(Default)_*# +

|`timeFormat`
|Output format of `java.sql.Time` +
[.small]#*Example:*#  [.small yellow-background]#_[v2.4.6 or earlier]_# +
&#160;&#160; `timeFormat = %1$tH:%1$tM:%1$tS` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: a `java.sql.Time` +
 +
[.small]#*Example:*# [.small lime-background]#_[v2.5.0 or later]_# +
&#160;&#160; `timeFormat = HH:mm:ss.SSSxxx` [.small .blue]#*_(Default)_*# +

|`timestampFormat`
|Output format of `java.sql.Timestamp` +
[.small]#*Example:*#  [.small yellow-background]#_[v2.4.6 or earlier]_# +
&#160;&#160; `timestampFormat = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
&#160;&#160; `%1`: a `java.sql.Timestamp` +
 +
[.small]#*Example:*# [.small lime-background]#_[v2.5.0 or later]_# +
&#160;&#160; `timestampFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*_(Default)_*# +

|`localDateFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.LocalDate` +
[.small]#*Example:*# +
&#160;&#160; `localDateFormat = yyyy-MM-dd` [.small .blue]#*_(Default)_*# +

|`localTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.LocalTime` +
[.small]#*Example:*# +
&#160;&#160; `localTimeFormat = HH:mm:ss.SSSSSSSSS` [.small .blue]#*_(Default)_*# +

|`offsetTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.OffsetTime` +
[.small]#*Example:*# +
&#160;&#160; `offsetTimeFormat = HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*_(Default)_*# +

|`localDateTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.LocalDateTime` +
[.small]#*Example:*# +
&#160;&#160; `localDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSS` [.small .blue]#*_(Default)_*# +

|`offsetDateTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.OffsetDateTime` +
[.small]#*Example:*# +
&#160;&#160; `offsetDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx` [.small .blue]#*_(Default)_*# +

|`zonedDateTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.ZonedDateTime` +
[.small]#*Example:*# +
&#160;&#160; `zonedDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSxxx VV` [.small .blue]#*_(Default)_*# +

|`instantFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of `java.time.Instant` +
[.small]#*Example:*# +
&#160;&#160; `instantFormat = yyyy-MM-dd HH:mm:ss.SSSSSSSSSX` [.small .blue]#*_(Default)_*# +

|`logDateTimeFormat` +
[.small lime-background]#_[since v2.5.0]_#
|Output format of the date and time of the log when the logger is `Std$Out` or `Std$Err` +
[.small]#*Example:*# +
&#160;&#160; `logDateTimeFormat = yyyy-MM-dd HH:mm:ss.SSSxxx` [.small .blue]#*_(Default)_*# +

|`arrayLimit`
|Limit of array and Collection elements to output
[.small]#*Example:*# +
&#160;&#160; `arrayLimit = 512` [.small .blue]#*_(Default)_*# +

|`byteArrayLimit`
|Limit of byte array (`byte[]`) elements to output
[.small]#*Example:*# +
&#160;&#160; `byteArrayLimit = 8192` [.small .blue]#*_(Default)_*# +

|`mapLimit`
|Limit of Map elements to output
[.small]#*Example:*# +
&#160;&#160; `mapLimit = 512` [.small .blue]#*_(Default)_*# +

|`stringLimit`
|Limit of String characters to output
[.small]#*Example:*# +
&#160;&#160; `stringLimit = 8192` [.small .blue]#*_(Default)_*# +

|`nonPrintProperties` +
[.small]#_[since v2.2.0]_#
|Properties not to be output +
[.small]#*Example (1 value):*# +
&#160;&#160; `NonPrintProperties = org.lightsleep.helper.EntityInfo#columnInfos` +
[.small]#*Example (multi values):*# +
&#160;&#160; `nonPrintProperties = \` +
&#160;&#160;&#160;&#160; `org.lightsleep.helper.EntityInfo#columnInfos,\` +
&#160;&#160;&#160;&#160; `org.lightsleep.helper.EntityInfo#keyColumnInfos,\` +
&#160;&#160;&#160;&#160; `org.lightsleep.helper.ColumnInfo#entityInfo` +
&#160;&#160; [.small .blue]#No default value# +
[.small]#*Format of a value:*# +
&#160;&#160; `<Full class name>#<Property name>`

|`defaultPackage` +
[.small]#_[since v2.3.0]_#
|Default package of your java source +
[.small]#*Example:*# +
&#160;&#160; `defaultPackage = org.debugtrace.DebugTraceExample` +
&#160;&#160; [.small .blue]#No default value# +

|`defaultPackageString` +
[.small]#_[since v2.3.0]_#
|String replacing the default package part +
[.small]#*Example:*# +
&#160;&#160; `defaultPackage = \...` [.small .blue]#*_(Default)_*# +

|`reflectionClasses` +
[.small]#_[since v2.4.0]_#
|Classe names that output content by reflection even if `toString` method is implemented +
[.small]#*Example (1 value):*# +
&#160;&#160; `reflectionClasses = org.debugtrce.DebugTraceExample.Point` +
[.small]#*Example (multi values):*# +
&#160;&#160; `reflectionClasses = \` +
&#160;&#160;&#160;&#160; `org.debugtrace.DebugTraceExample.Point,\` +
&#160;&#160;&#160;&#160; `org.debugtrace.DebugTraceExample.Rectangle` +
&#160;&#160; [.small .blue]#No default value# +

|`mapNameMap` +
[.small]#_[since v2.4.0]_#
|Map for obtaining map name corresponding to variable name +
[.small]#*Example:*# +
&#160;&#160; `mapNameMap = appleBrand: AppleBrand` +
[.small]#*Format of a value:*# +
&#160;&#160; `<Variable Name>: <Map Name>` +
&#160;&#160; [.small .blue]#No default value# +

|`<Constant Map Name>` +
[.small]#_[since v2.4.0]_#
|Map of numbers (as key) and constant names (as value) corresponding to the numbers +
&#160;&#160; `AppleBrand = \` +
&#160;&#160;&#160;&#160; `0: Apple.NO_BRAND,\` + 
&#160;&#160;&#160;&#160; `1: Apple.AKANE,\` + 
&#160;&#160;&#160;&#160; `2: Apple.AKIYO,\` + 
&#160;&#160;&#160;&#160; `3: Apple.AZUSA,\` + 
&#160;&#160;&#160;&#160; `4: Apple.YUKARI` + 
[.small]#*Format of a value:*# +
&#160;&#160; `<Number>: <Constant Name>` +
[.small]#*Predefined constant name maps:*# +
&#160;&#160; `Calendar`: `Calendar.ERA` etc. +
&#160;&#160; `CalendarWeek`: `Calendar.SUNDAY` etc. +
&#160;&#160; `CalendarMonth`: `Calendar.JANUARY` etc. +
&#160;&#160; `CalendarAmPm`: `Calendar.AM` etc. +
&#160;&#160; `SqlTypes`: `java.sql.Types.BIT` etc.

|===
Specify the output format of the date and time in the form of the argument of `String.format` for *DebugTrace-java 2.4.6 or earlier*, and specify it in the form of the argument `DateTimeFormatter.ofPattern` for *DebugTrace-java 2.5.0 or later*.

==== 4.1. *nonPrintProperties*, *nonPrintString*

DebugTrace use reflection to output object contents if the `toString` method is not implemented.
If there are other object references, the contents of objects are also output.
However, if there is circular reference, it will automatically detect and suspend output.
You can suppress output by specifying the `nonPrintProperties` property and
can specify multiple values of this property separated by commas.  
The value of the property specified by `nonPrintProperties` are output as the string specified by `nonPrintString` (default: `\***`).

.Example of nonPrintProperties in DebugTrace.properties
----
nonPrintProperties = \
    org.lightsleep.helper.EntityInfo#columnInfos,\
    org.lightsleep.helper.EntityInfo#keyColumnInfos,\
    org.lightsleep.helper.ColumnInfo#entityInfo
----

==== 4.2. Constant map and *mapNameMap*

The constant map is a map whose key is numeric and whose value is a constant name.
When you call the `print` method with the key (map name) of this property as an argument, the constant name is output with numerical value.

.Example of constant map in DebugTrace.properties
----
AppleBrand = \
    0: Apple.NO_BRAND,\
    1: Apple.AKANE,\
    2: Apple.AKIYO,\
    3: Apple.AZUSA,\
    4: Apple.YUKARI
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("AppleBrand", "appleBrand", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:29)
----

If you specify the map name corresponding to the variable name with the `mapNameMap` property, even if you do not specify the map name, the constant name is output.

.Example of *mapNameMap* in DebugTrace.properties
----
mapNameMap = appleBrand: AppleBrand
----

[source,java]
.Example of Java source
----
int appleBrand = Apple.AKANE;
DebugTrace.print("appleBrand", appleBrand);
appleBrand = Apple.AKIYO;
DebugTrace.print(" 2 appleBrand ", appleBrand);
appleBrand = Apple.AZUSA;
DebugTrace.print(" 3 example.appleBrand ", appleBrand);
appleBrand = Apple.YUKARI;
DebugTrace.print(" 4 example. appleBrand ", appleBrand);
----

.Example of the log
----
2017-07-29 13:45:32.489 | appleBrand = 1(Apple.AKANE) (README_example.java:38)
2017-07-29 13:45:32.489 |  2 appleBrand  = 2(Apple.AKIYO) (README_example.java:40)
2017-07-29 13:45:32.489 |  3 example.appleBrand  = 3(Apple.AZUSA) (README_example.java:42)
2017-07-29 13:45:32.489 |  4 example. appleBrand  = 4(Apple.YUKARI) (README_example.java:44)
----

=== 5. Examples of using logging libraries

The logger name of DebugTrace is `org.debugtrace.DebugTrace`.   

==== 5.1. Example of *logging.properties* (Jdk)

.logging.properties
----
handlers = java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format = [Jdk] %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %5$s%n
java.util.logging.ConsoleHandler.level = FINEST
org.debugtrace.DebugTrace.level = FINEST
----
*`-Djava.util.logging.config.file=<path>/logging.properties` is required as Java startup option*

==== 5.2. Example of *log4j.xml* (Log4j)

[source,xml]
.log4j.xml
----
<!-- log4j.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  <appender name="Console" class="org.apache.log4j.ConsoleAppender">
    <param name="Target" value="System.out"/>
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="[Log4j] %d{yyyy-MM-dd HH:mm:ss.SSS} %5p %m%n"/>
    </layout>
  </appender>
  <logger name="org.debugtrace.DebugTrace">
    <level value ="trace"/>
    <appender-ref ref="Console"/>
  </logger>
</log4j:configuration>
----

==== 5.3. Example of *log4j2.xml* (Log4j2)

[source,xml]
.log4j2.xml
----
<!-- log4j2.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<configuration status="WARN">
  <appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <PatternLayout pattern="[Log4j2] %d{yyyy-MM-dd HH:mm:ss.SSS} %5p %msg%n"/>
    </Console>
  </appenders>
  <loggers>
    <logger name="org.debugtrace.DebugTrace" level="trace"/>
    <root level="error"><appender-ref ref="Console"/></root>
  </loggers>
</configuration>
----

==== 5.4. Example of *logback.xml* (SLF4J / Logback)

[source,xml]
.logback.xml
----
<!-- logback.xml -->
<configuration>
  <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>[SLF4J logback] %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg%n</pattern>
    </encoder>
  </appender>
  <logger name="org.debugtrace.DebugTrace" level="trace"/>
  <root level="error"><appender-ref ref="Console"/></root>
</configuration>
----

=== 6. Example of *build.gradle* description

[source,groovy]
.build.gradle
----
repositories {
    jcenter()
}

dependencies {
    compile 'org.debugtrace:debugtrace:2.+'
}
----

=== 7. License

link:LICENSE.txt[The MIT License (MIT)]

[gray]#_(C) 2015 Masato Kokubo_#

=== 8. Links

http://masatokokubo.github.io/DebugTrace-java/javadoc/index.html[API Specification]
